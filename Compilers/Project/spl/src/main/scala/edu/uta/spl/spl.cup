/********************************************************************************
*
* File: spl.cup
* The SPL parser
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;


parser code {:

    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }

:};

/* Terminals (tokens returned by the scanner). */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB, UMINUS;

non terminal Program program;
non terminal BlockSt block_content;
non terminal defs;
non terminal Stmt stmt;
non terminal stmts;
non terminal Expr expr;
non terminal Lvalue lvalue;
non terminal Type type;
non terminal Definition def;
non terminal List<Expr> expr_list;
non terminal expr_list_item;
non terminal List<Lvalue> lvalue_list;
non terminal Lvalue lvalue_list_item;
non terminal id_expr_list;
non terminal id_expr_list_item;
non terminal List<Bind<Type>> id_type_list;
non terminal Bind<Type> id_type_list_item;
non terminal List<Type> type_list;
non terminal type_list_item;
non terminal List<Definition> def_list;
non terminal def_list_item;
non terminal List<Stmt> stmt_list;
non terminal Stmt stmt_list_item;

/* Precedences */
precedence nonassoc ELSE;
precedence right LB, LSB, LP;
precedence left RB, RSB, LSB;
precedence right OR;
precedence right AND;
precedence nonassoc NOT;
precedence left LEQ, LT, GT, GEQ, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left UMINUS;

start with program;

program         ::= block_content:b {: SPL.setAST(new Program(b));  :}
                ;

block_content   ::= def_list:d stmt_list:s {: RESULT = new BlockSt(d, s); :}
                | stmt_list:s {: RESULT = new BlockSt(nil, s); :}
                ;

def             ::= DEF ID LP RP LB block_content RB
                | DEF ID LP RP COLON type LB block_content RB
                | DEF ID LP ID COLON type RP LB block_content RB
                | DEF ID LP ID COLON type RP COLON type LB block_content RB
                | DEF ID LP id_type_list RP LB block_content RB
                | DEF ID LP id_type_list RP COLON type LB block_content RB
                | VAR ID:i EQUAL expr:expr1 /*{: RESULT = new VarDef(i, new AnyType(), expr1); :}*/
                | VAR ID COLON type EQUAL expr
                | TYPE ID EQUAL type
                ;

type            ::= INT {: RESULT = new IntType(); :}
                | FLOAT {: RESULT = new FloatType(); :}
                | STRING {: RESULT = new StringType(); :}
                | BOOLEAN {: RESULT = new BooleanType(); :}
                | ID:i {: RESULT = new NamedType(i); :}
                | ARRAY {: RESULT = new ArrayType(new AnyType()); :}
                | ARRAY LSB type:t RSB {: RESULT = new ArrayType(t); :}
                | LB ID:i COLON type:t RB {: RESULT = new RecordType(add(new Bind<Type>(i, t), nil)); :}
                | LB id_type_list:itl RB {: RESULT = new RecordType(itl); :}
                | LP RP {: RESULT = new TupleType(nil); :}
                | LP type:t RP {: RESULT = new TupleType(add(t, nil)); :}
                | LP type_list:tl RP {: RESULT = new TupleType(tl); :}
                ;

lvalue          ::= lvalue LSB expr RSB
                | lvalue DOT ID
                | lvalue SHARP INTEGER_LITERAL
                | ID:id {:  RESULT = new Var(id); :}
                ;

expr            ::= expr:e1 PLUS expr:e2 {: RESULT = new BinOpExp("plus", e1, e2); :}
                | expr MINUS expr
                | expr TIMES expr
                | expr DIV expr
                | expr MOD expr
                | expr AND expr
                | expr OR expr
                | expr EQ expr
                | expr NEQ expr
                | expr LT expr
                | expr LEQ expr
                | expr GT expr
                | expr GEQ expr
                | MINUS expr %prec UMINUS
                | NOT expr
                | INTEGER_LITERAL:i {: RESULT = new IntConst(i); :}
                | FLOAT_LITERAL
                | STRING_LITERAL:s {: RESULT = new StringConst(s); :}
                | TRUE
                | FALSE
                | lvalue:l {: RESULT =  new LvalExp(l); :}
                | ARRAY LP expr COMMA expr RP
                | ID LP RP
                | ID LP expr RP
                | ID LP expr_list RP
                | LB ID EQUAL expr RB
                | LB id_expr_list RB
                | LP RP
                | LP expr_list RP
                | LSB RSB
                | LSB expr_list RSB
                ;

stmt            ::= lvalue:lv EQUAL expr:e1 {: RESULT = new AssignSt(lv, e1); :}
                | ID LP RP
                | ID LP expr RP
                | ID LP expr_list RP
                | LB block_content RB
                | READ LP lvalue RP
                | READ LP lvalue_list RP
                | PRINT LP RP
                | PRINT LP expr:e RP {: RESULT = new PrintSt(add(e, nil)); :}
                | PRINT LP expr_list:el RP {: RESULT = new PrintSt(el); :}
                | IF LP expr RP stmt
                | IF LP expr RP stmt ELSE stmt
                | FOR LP ID EQUAL expr TO expr RP stmt
                | FOR LP ID EQUAL expr TO expr BY expr RP stmt
                | WHILE LP expr RP stmt
                | LOOP stmt
                | EXIT
                | RETURN
                | RETURN expr
                ;

expr_list       ::= expr_list expr_list_item
                | expr_list expr
                | expr_list_item
                ;

expr_list_item  ::= expr COMMA
                ;

lvalue_list     ::= lvalue_list lvalue_list_item
                | lvalue_list lvalue
                | lvalue_list_item
                ;

lvalue_list_item ::= lvalue COMMA
                 ;

id_expr_list    ::= id_expr_list id_expr_list_item
                | id_expr_list ID EQUAL expr
                | id_expr_list_item
                ;

id_expr_list_item ::= ID EQUAL expr COMMA
                  ;

id_type_list    ::= id_type_list id_type_list_item
                | id_type_list:tl ID:i COLON type:t /*{:
                    l1 = add(i, nil);
                    l1 = append(l1, ":");
                    RESULT = append(tl, nil); :}*/
                | id_type_list_item:i {: RESULT = add(i, nil); :}
                ;

id_type_list_item   ::= ID:i COLON type:t COMMA {: RESULT = new Bind<Type>(i, t); :}
                    ;

type_list       ::= type_list type_list_item
                | type_list type
                | type_list_item
                ;

type_list_item  ::= type COMMA
                ;

def_list       ::= def_list def_list_item
                | def_list def
                | def_list_item
                ;

def_list_item  ::= def SEMI
                ;

stmt_list       ::= stmt_list:s1 stmt_list_item:s2 {: RESULT = append(s1, s2); :} /*{: System.out.println("Test"); :}*/
                | stmt_list def
                | stmt_list_item:si {: RESULT = append(nil, si); :} /*{: System.out.println("Test"); :} */
                ;

stmt_list_item  ::= stmt:s SEMI {: RESULT = s; :}
                ;