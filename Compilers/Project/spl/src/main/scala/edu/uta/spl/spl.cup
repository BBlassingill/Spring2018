/********************************************************************************
*
* File: spl.cup
* The SPL parser
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;


parser code {:

    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }

:};

/* Terminals (tokens returned by the scanner). */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB, UMINUS;

non terminal program;
non terminal block_content;
non terminal defs;
non terminal stmt;
non terminal stmts;
non terminal expr;
non terminal lvalue;
non terminal type;
non terminal def;
non terminal expr_list;
non terminal expr_list_item;
non terminal lvalue_list;
non terminal lvalue_list_item;

/* Precendeces */
precedence nonassoc ELSE;
/*precedence right COMMA;*/
precedence right LB, LSB, LP;
precedence left RB, RSB, LSB;
precedence right OR;
precedence right AND;
precedence nonassoc NOT;
precedence left LEQ, LT, GT, GEQ, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left UMINUS;

start with program;

program         ::= block_content:b
                ;

block_content   ::= defs:dl stmts:sl
                |   stmts:sl
                ;

def             ::= type ID EQUAL type
                /*| VAR ID EQUAL expr */
                /*|   ’def’ ID ’(’ [ ID ’:’ type { ’,’ ID ’:’ type } ] ’)’ [ ’:’ type ] ’{’ block ’}’*/
                ;


defs            ::= DEF
                ;

type            ::= INT
                | FLOAT
                | STRING
                | BOOLEAN
                | ID
                | ARRAY LSB type RSB
                /*| LB ID COLON type RB */
                /*| LP list of types RP */
                ;

lvalue          ::= lvalue LSB expr RSB
                | lvalue DOT ID
                | lvalue SHARP INTEGER_LITERAL
                | ID
                ;

expr            ::= expr PLUS expr
                | expr MINUS expr
                | expr TIMES expr
                | expr DIV expr
                | expr MOD expr
                | expr AND expr
                | expr OR expr
                | expr EQ expr
                | expr NEQ expr
                | expr LT expr
                | expr LEQ expr
                | expr GT expr
                | expr GEQ expr
                | UMINUS expr
                | NOT expr
                | INTEGER_LITERAL
                | FLOAT_LITERAL
                | STRING_LITERAL
                | TRUE
                | FALSE
                | lvalue
                | ARRAY LP expr COMMA expr RP
                | ID LP RP
                /*| ID LP list of expr RP
                | LB ID EQUAL expr RP
                | LP list of expressions RP
                | LSB expr list of expr RSB
                | LSB expr RSB
                */
                ;

expr_list       ::= expr_list expr_list_item
                | expr_list expr
                | expr_list_item
                ;

expr_list_item  ::= expr COMMA
                ;

lvalue_list     ::= lvalue_list lvalue_list_item
                | lvalue_list lvalue
                | lvalue_list_item
                ;

lvalue_list_item ::= lvalue COMMA
                 ;

stmt            ::= lvalue EQUAL expr
                | ID LP RP
                | ID LP expr_list RP
                | LB block_content RB
                | READ LP lvalue_list RP
                | PRINT LP RP
                | PRINT LP expr RP
                | PRINT LP expr_list RP
                | IF LP expr RP stmt
                | IF LP expr RP stmt ELSE stmt
                | FOR LP ID EQUAL expr TO expr RP stmt
                | FOR LP ID EQUAL expr TO expr BY expr RP stmt
                | WHILE LP expr RP stmt
                | LOOP stmt
                | EXIT
                | RETURN
                | RETURN expr
                ;
stmts           ::= stmt:s SEMI
                |   stmts:sl stmt:s SEMI
                ;