
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SplParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SplParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\007\003" +
    "\000\002\005\007\000\002\006\004\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\006\014\007\041\011\001\002\000\004\041" +
    "\011\001\002\000\006\002\ufffe\041\011\001\002\000\004" +
    "\002\021\001\002\000\004\041\ufffd\001\002\000\004\055" +
    "\020\001\002\000\004\061\013\001\002\000\004\002\000" +
    "\001\002\000\004\006\014\001\002\000\004\062\ufffc\001" +
    "\002\000\004\062\016\001\002\000\004\041\011\001\002" +
    "\000\004\055\ufffb\001\002\000\006\002\ufffa\041\ufffa\001" +
    "\002\000\004\002\001\001\002\000\004\055\023\001\002" +
    "\000\006\002\ufff9\041\ufff9\001\002\000\006\002\uffff\041" +
    "\011\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\014\002\005\003\011\004\003\005\007\006" +
    "\004\001\001\000\006\005\007\006\023\001\001\000\004" +
    "\005\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\021\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SplParser$actions {
  private final SplParser parser;

  /** Constructor */
  CUP$SplParser$actions(SplParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SplParser$do_action_part00000000(
    int                        CUP$SplParser$act_num,
    java_cup.runtime.lr_parser CUP$SplParser$parser,
    java.util.Stack            CUP$SplParser$stack,
    int                        CUP$SplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SplParser$result;

      /* select the action based on the action number */
      switch (CUP$SplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		RESULT = start_val;
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SplParser$parser.done_parsing();
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= block_content 
            {
              Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		BlockSt b = (BlockSt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 SPL.setAST(new Program(b)); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block_content ::= defs stmts 
            {
              BlockSt RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		List<Definition> dl = (List<Definition>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BlockSt(dl,sl); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("block_content",1, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block_content ::= stmts 
            {
              BlockSt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new BlockSt(nil,sl); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("block_content",1, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // defs ::= DEF 
            {
              List<Definition> RESULT =null;

              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("defs",2, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new IntConst(n); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= WHILE LP expr RP stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.peek()).value;
		 RESULT = new WhileSt(e,s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmts ::= stmt SEMI 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = append(nil,s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmts ::= stmts stmt SEMI 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SplParser$stack.elementAt(CUP$SplParser$top-1)).value;
		 RESULT = append(sl,s); 
              CUP$SplParser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$SplParser$stack.elementAt(CUP$SplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SplParser$stack.peek()), RESULT);
            }
          return CUP$SplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SplParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SplParser$do_action(
    int                        CUP$SplParser$act_num,
    java_cup.runtime.lr_parser CUP$SplParser$parser,
    java.util.Stack            CUP$SplParser$stack,
    int                        CUP$SplParser$top)
    throws java.lang.Exception
    {
              return CUP$SplParser$do_action_part00000000(
                               CUP$SplParser$act_num,
                               CUP$SplParser$parser,
                               CUP$SplParser$stack,
                               CUP$SplParser$top);
    }
}

}
